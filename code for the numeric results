#function of pseudo-likelihood method
pseudo=function(A,e)
{
  n=length(e);
  K=max(e);
  T=10
  for (t in 1:T)
  {
    
    Pi=rep(0,K);
    for (k in 1:K)
      Pi[k]=sum(e==k)/n;
    
    lambda=matrix(0,K,K);   
    P=matrix(0,K,K);
    for (l in 1:(K))
      for (k in 1:(K))
      {    
        ind1=which(e==l)
        ind2=which(e==k)
        if (l!=k)
        {P[l,k]=sum(A[ind1,ind2])/(length(ind1)*length(ind2));}
        if (l==k)       
        {P[l,k]=sum(A[ind1,ind1])/(length(ind1)*(length(ind1)-1)); }
      }
    for (l in 1:(K))  
      for (k in 1:(K))
      {
        lambda[l,k]=sum(e==k)*P[l,k]
      }
    b=matrix(0,n,K);
    for (i in 1:n)
      for (k in 1:(K))
        b[i,k]=sum(A[i,e==k]);
    diff=1;
    
    while (diff>1e-5)
    {
      z=matrix(0,n,K);
      for (i in 1:n)
      {
        
        for (l in 1:K)
        {
          z[i,l]=Pi[l]
          for (k in 1:(K))
            z[i,l]=z[i,l]*exp(-lambda[l,k])*(lambda[l,k])^b[i,k];
          
        }
        
        z[i,]=z[i,]/sum(z[i,]);   
        
      }
      lambdaNew=matrix(0,K,K);
      for (l in 1:(K))
        for (k in 1:(K))
        {
          lambdaNew[l,k]=sum(b[,k]*z[,l])/sum(z[,l]);
          
        }
      
      PiNew=apply(z,2,sum);
      PiNew=PiNew[1:K]/sum(PiNew[1:K]);
      diff=max(max(abs(Pi-PiNew)),max(abs(lambda-lambdaNew)))
      if (is.na(diff)==T)
        return(list(error=1));
      if (abs(diff)>30)
      { return(list(error=1)) }
      
      #cat("diff=",diff,"\n");
      Pi=PiNew;
      lambda=lambdaNew;
      
    }
    e=apply(z,1,which.max);
    #cat(e,"\n")
    
    
  }
  
  return(list(error=0,e=e, Pi=Pi,lambda=lambda,b=b,z=z));
}

#function of conditional pseudo-likelihood method
pseudo_DR=function(A,e)
{
  n=length(e);
  K=max(e);
  T=10
  for (t in 1:T)
  {
    
    Pi=rep(0,K);
    for (k in 1:K)
      Pi[k]=sum(e==k)/n;
    
    lambda=matrix(0,K,K);   
    
    P=matrix(0,K,K);
    for (l in 1:(K))
      for (k in 1:(K))
      {    
        ind1=which(e==l)
        ind2=which(e==k)
        if (l!=k)
        {P[l,k]=sum(A[ind1,ind2])/(length(ind1)*length(ind2));}
        if (l==k)       
        {P[l,k]=sum(A[ind1,ind1])/(length(ind1)*(length(ind1)-1)); }
      }
    for (l in 1:(K))  
      for (k in 1:(K))
      {
        lambda[l,k]=sum(e==k)*P[l,k]
      }
    
    theta=matrix(0,K,K); 
    for (l in 1:(K))  
      for (k in 1:(K))
      {
        theta[l,k]=lambda[l,k]/(sum(lambda[l,]))
      }
    
    
    b=matrix(0,n,K);
    for (i in 1:n)
      for (k in 1:(K))
        b[i,k]=sum(A[i,e==k]);
    
    deg=apply(b,1,sum);
    
    diff=1;
    
    while (diff>1e-5)
    {
      z=matrix(0,n,K);
      for (i in 1:n)
      {
        
        for (l in 1:K)
        {
          z[i,l]=Pi[l]
          for (k in 1:(K))
            z[i,l]=z[i,l]*theta[l,k]^b[i,k];
          
        }
        
        z[i,]=z[i,]/sum(z[i,]);   
        
      }
      thetaNew=matrix(0,K,K);
      for (l in 1:(K))
        for (k in 1:(K))
        {
          thetaNew[l,k]=sum(b[,k]*z[,l])/sum(deg*z[,l]);
          
        }
      
      PiNew=apply(z,2,sum);
      PiNew=PiNew[1:K]/sum(PiNew[1:K]);
      diff=max(max(abs(Pi-PiNew)),max(abs(theta-thetaNew)))
      #cat("diff=",diff,"\n");
      
      if (is.finite(diff)==F)
        return(list(error=1));
      if (abs(diff)>30)  
        return(list(error=1));
      
      
      Pi=PiNew;
      theta=thetaNew;
      
    }
    e=apply(z,1,which.max);
    #cat(e,"\n")
    
    
  }
  
  return(list(error=0,e=e, Pi=Pi,theta=theta,b=b,z=z));
}

#function of generating the adjacency matrix A
generate.A=function(c,rho,lambda){
  n=length(c)
  p0=matrix(c(0.9,0.1,0.1,0.9),2,2)
  p=2*lambda*p0/((n-1)*(1-0.8*rho)^2)
  A=matrix(0,n,n)
  for (i in 1:n){
    if(rbinom(1,1,1-rho)==1) theta.i=1
    else theta.i=0.2
    for (j in 1:n){
      if(rbinom(1,1,1-rho)==1) theta.j=1
      else theta.j=0.2
      A[i,j]=rbinom(1,1,theta.i*theta.j*p[c[i],c[j]])
    }
  }
  diag(A)=rep(0,n)
  A[lower.tri(A)]=t(A)[lower.tri(A)]
  return(A)
}

#--------------------numeric studies(comparing spectural clustering with pseudo-likelihood methods)---------------#
library(fcd)
#generate true label c
set.seed(3564756)
n=5000
c=rbinom(n,1,0.5)+1
A=generate.A(c,0,1)
e=spectral.clustering(A)
e_out=pseudo(A,e)$e
lambda=seq(1,12,1)
pr_pl=c(); pr_cpl=c(); pr_sc=c()
for (i in 1:12){
  A=generate.A(c,0.5,7)
  start_time= Sys.time()
  e_sc=spectral.clustering(A)
  time.sc=Sys.time()-start_time
  time.sc
  #if (sum(e_sc!=c)>=500) e_sc=ifelse(e_sc==1,2,1)
  e_pl=pseudo(A,e_sc)$e
  time.pl=Sys.time()-start_time
  time.pl
  e_cpl=pseudo_DR(A,e_sc)$e
  time.cpl=Sys.time()-(time.pl-time.sc)-start_time
  time.cpl
  #pr_sc[i]=sum(c!=e_sc)/n; pr_pl[i]=sum(c!=e_pl)/n; pr_cpl[i]=sum(c!=e_cpl)/n
}
pr_sc=ifelse(pr_sc>0.8,1-pr_sc,pr_sc)
pr_cpl=ifelse(pr_cpl>0.8,1-pr_cpl,pr_cpl)
pr_pl=ifelse(pr_pl>0.8,1-pr_pl,pr_pl)

plot(lambda,1-pr_sc,type='b',ylab="Correctly clustered rate",
      main="Comparison of models with about half hub nodes")
lines(lambda,1-pr_pl,type='b',pch=15,col="red")
lines(lambda,1-pr_cpl,type='b',pch=17,col="blue")
legend("bottomright",c("SC", "PL.SC", "CPL.SC"), lty=rep(1,2),
         pch=c(1,15,17),col=c("black","red","blue"))
